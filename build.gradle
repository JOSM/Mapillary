plugins {
  id "org.sonarqube" version "2.4"
  id "org.kordamp.markdown.convert" version "1.1.0"
  id "com.github.ben-manes.versions" version "0.14.0"
}

apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'pmd'

configurations {
  compile.extendsFrom(requiredPlugin)
  minJosmVersionCompile.extendsFrom(requiredPlugin)
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/run-josm-plugin-tasks.gradle'
apply from: 'gradle/tool-config.gradle'
apply from: 'gradle/markdown.gradle'

sourceCompatibility = '1.8'
version = getVersionName()

repositories {
  // for JUnit
  mavenCentral()
  //for josm-(latest|tested).jar
  ivy {
    url 'https://josm.openstreetmap.de/download'
    layout 'pattern', {
      artifact "[artifact]-[revision].jar"
      artifact "[artifact]-snapshot-[revision].jar"
      artifact "Archiv/[artifact]-snapshot-[revision].jar"
    }
  }
  //for josm-plugins
  ivy {
    url "https://svn.openstreetmap.org/applications/editors/josm/dist/"
    layout "pattern", {
      artifact "[artifact].jar"
    }
  }
}

dependencies {
  /**
   * The JOSM-version can be specified as "latest", "tested" or the numeric version number.
   * When using a numeric version number you can leave out {changing=true}.
   *
   * Please check for numeric versions, if that specific version is available for download from https://josm.openstreetmap.de/download/ .
   * If not, choose the next higher number that is available, or the gradle build will break.
   */
  implementation(':josm:12039')
  // For plugins it's irrelevant, which version is specified, always the latest version is used.
  requiredPlugin (name: 'apache-commons'){changing=true}
  requiredPlugin (name: 'apache-http'){changing=true}

  testImplementation 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ["$projectDir"]
      include 'data/**'
      include 'images/**'
      include 'LICENSE'
      include 'LICENSE_*'
    }
  }
  minJosmVersion {
    java {
      srcDirs = sourceSets.main.java.srcDirs
    }
    resources {
      srcDirs = sourceSets.main.resources.srcDirs
      includes = sourceSets.main.resources.includes
    }
  }
  test {
    java {
      srcDirs = ['test/unit']
    }
    resources{
      srcDirs = ['test/data']
    }
  }
}

task addMinJosmVersionDependency {
  doLast {
    def minJosmVersion = getNextJosmVersion(project.property('plugin.main.version'))
    if (minJosmVersion == null) {
      throw new GradleException("Could not determine the minimum required JOSM version from the given version number '" + project.property('plugin.main.version') + "'")
    }
    println 'Use JOSM version ' + minJosmVersion + ' for compiling against the minimum required version'
    configurations.minJosmVersionCompile.dependencies.add(project.getDependencies().create(':josm:'+ minJosmVersion))
  }
}
compileMinJosmVersionJava.dependsOn addMinJosmVersionDependency

eclipse {
  project {
    name = 'JOSM-Mapillary'
    comment = property('plugin.description')
    natures 'org.sonarlint.eclipse.core.sonarlintNature', 'ch.acanda.eclipse.pmd.builder.PMDNature', 'org.eclipse.buildship.core.gradleprojectnature'
    buildCommand 'org.sonarlint.eclipse.core.sonarlintBuilder'
    buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  }
}
eclipseClasspath.dependsOn cleanEclipseClasspath
eclipseProject.dependsOn cleanEclipseProject
tasks.eclipse.dependsOn = ['eclipseClasspath', 'eclipseProject']

tasks.withType(Javadoc) {
  failOnError false
}

test {
  testLogging {
    exceptionFormat "full"
    events "passed", "skipped", "failed"
  }
}
