name: Java CI

on:
  push:
    branches:
      - master
      - $default-branch
      - $protected-branches
  pull_request:
    branches:
      - master
      - $default-branch
  workflow_dispatch:

permissions:
  id-token: write
  attestations: write
  contents: write
  packages: write

jobs:
  check-release-needed:
    runs-on: ubuntu-latest
    outputs:
      release_needed: ${{ steps.create_release_needed.outputs.release_needed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ (github.repository == 'JOSM/Mapillary' && github.ref_type == 'branch' && github.ref_name == 'master' && github.event_name != 'schedule' && github.event_name != 'pull_request') && '0' || '1' }}

      - name: Set release needed
        id: create_release_needed
        run: |
          last_tag=$(git describe --tags --abbrev=0 --always)
          release_needed="false"
          for file in $(git diff ${last_tag}..HEAD --name-only); do
            if [[ $file = "src/main"* ]]; then
              release_needed="true"
              break
            fi
          done
          echo "release_needed=$release_needed" >> $GITHUB_OUTPUT
  call-workflow-latest:
    needs: check-release-needed
    uses: JOSM/JOSMPluginAction/.github/workflows/ant.yml@v3
    with:
      josm-revision: ""
      java-version: 17
  call-workflow-min:
    needs: check-release-needed
    uses: JOSM/JOSMPluginAction/.github/workflows/ant.yml@v3
    with:
      josm-revision: "r19387"
      java-version: 17
      perform-revision-tagging: ${{ needs.check-release-needed.outputs.release_needed == 'true' }}

  add-mapillary-keys:
      runs-on: ubuntu-latest
      needs: call-workflow-min
      if: needs.check-release-needed.outputs.release_needed == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      steps:
          - uses: actions/checkout@v4
            with:
                fetch-depth: 0
          - name: Echo env
            run: echo ${{ needs.call-workflow-min.outputs.tag }}
          - name: Get Mapillary jar
            run: gh release download ${{ needs.call-workflow-min.outputs.tag }} --pattern Mapillary.jar
          - name: Add keys
            run: |
                cat <<EOF > mapillary_api_keys.json
                {
                    "MAPILLARY_CLIENT_ID": "${{ secrets.MAPILLARY_CLIENT_ID }}",
                    "MAPILLARY_CLIENT_TOKEN": "${{ secrets.MAPILLARY_CLIENT_TOKEN }}",
                    "MAPILLARY_CLIENT_SECRET": "${{ secrets.MAPILLARY_CLIENT_SECRET }}"
                }
                EOF
                zip Mapillary.jar mapillary_api_keys.json
          - name: Perform attestation (jar after adding API keys)
            uses: actions/attest-build-provenance@v1
            with:
              subject-path: Mapillary.jar
          - name: Upload Mapillary jar
            run: gh release upload ${{ needs.call-workflow-min.outputs.tag }} --clobber Mapillary.jar
