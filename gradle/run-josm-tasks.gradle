// Custom tasks for running JOSM via Gradle tasks

apply from: buildscript.sourceFile.parentFile.path + '/run-josm-config.gradle'

task cleanJosm(type: Delete) {
  group 'JOSM'
  description 'Delete JOSM configuration in `build/.josm/`'
  delete tmpJosmHome
}

task initJosmPrefs(type: Copy) {
  description 'Puts a default preferences.xml file into `build/.josm/`'
  doFirst {
    if (new File("$tmpJosmHome/preferences.xml").exists()) {
      println "JOSM preferences not copied, file is already present.\nIf you want to replace it, run the task 'cleanJosm' additionally."
      exclude '*'
    } else {
      include 'preferences.xml'
    }
  }
  from "$josmConfigDir"
  into "$buildDir/.josm"
}

task updateJosmPlugins() {
  description '"Meta-task" to put all needed plugin *.jar files into the plugins directory. All tasks that copy the needed files (should) dependOn this task.'
}

task runJosm(type: RunJosmTask) {
  description 'Runs an independent JOSM instance (version specified in project dependencies) with `build/.josm/` as home directory and the freshly compiled Mapillary plugin active.'
}

task debugJosm(type: RunJosmTask) {
  description 'Runs a JOSM instance like the task `runJosm`, but with JDWP (Java debug wire protocol) active on port ' + debugPort
  extraInformation '\nThe application is listening for a remote debugging connection on port ' + debugPort + '. It will start execution as soon as the debugger is connected.\n'
  jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort
}

/**
 * Define a RunJosmTask as subclass of JavaExec
 */
class RunJosmTask extends JavaExec {
  String extraInformation = ''
  public RunJosmTask() {
    group 'JOSM'
    main 'org.openstreetmap.josm.gui.MainApplication'
    args (project.hasProperty('josmArgs') ? project.josmArgs.split('\\\\') : [])
  }
}

/**
 * Extend all RunJosmTasks with extra functionality
 */
tasks.withType(RunJosmTask) {
  dependsOn updateJosmPlugins
  classpath = sourceSets.main.runtimeClasspath
  systemProperties['josm.home'] = tmpJosmHome
  doFirst {
    println "Running version ${project.version}"
    def josmDependencies = configurations.compile.allDependencies.findAll({dep -> "josm".equals(dep.name)})
    for (def dep : josmDependencies) {
      println "\nUsing JOSM version " + dep.version
    }

    println '\nThese system properties are set:'
    for (def entry : systemProperties.entrySet()) {
      println entry.key + " = " + entry.value
    }

    if (args.size() <= 0) {
      println '\nNo command line arguments are passed to JOSM.\nIf you want to pass arguments to JOSM add \'-PjosmArgs="arg0\\\\arg1\\\\arg2\\\\..."\' when starting Gradle from the commandline (separate the arguments with double-backslashes).'
    } else {
      println '\nPassing these arguments to JOSM:'
      println args.join('\n')
    }

    print extraInformation

    println '\nOutput of JOSM starts after the three equality signs\n==='
  }
}
